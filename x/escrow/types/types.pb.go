// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iov/escrow/v1beta1/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/iov-one/starnamed/x/starname/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EscrowState defines the state of an escrow
type EscrowState int32

const (
	// ESCROW_STATE_OPEN defines an open state.
	Open EscrowState = 0
	// ESCROW_STATE_COMPLETED defines a completed state.
	Completed EscrowState = 1
	// ESCROW_STATE_REFUNDED defines a refunded state.
	Refunded EscrowState = 2
)

var EscrowState_name = map[int32]string{
	0: "ESCROW_STATE_OPEN",
	1: "ESCROW_STATE_COMPLETED",
	2: "ESCROW_STATE_REFUNDED",
}

var EscrowState_value = map[string]int32{
	"ESCROW_STATE_OPEN":      0,
	"ESCROW_STATE_COMPLETED": 1,
	"ESCROW_STATE_REFUNDED":  2,
}

func (x EscrowState) String() string {
	return proto.EnumName(EscrowState_name, int32(x))
}

func (EscrowState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06970306f8aa7966, []int{0}
}

// Escrow defines the struct of an escrow
type Escrow struct {
	Id       string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Seller   string                                   `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	Buyer    string                                   `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Object   *types.Any                               `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	Price    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	State    EscrowState                              `protobuf:"varint,6,opt,name=state,proto3,enum=starnamed.x.escrow.v1beta1.EscrowState" json:"state,omitempty"`
	Deadline uint64                                   `protobuf:"varint,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *Escrow) Reset()         { *m = Escrow{} }
func (m *Escrow) String() string { return proto.CompactTextString(m) }
func (*Escrow) ProtoMessage()    {}
func (*Escrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_06970306f8aa7966, []int{0}
}
func (m *Escrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Escrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Escrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Escrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Escrow.Merge(m, src)
}
func (m *Escrow) XXX_Size() int {
	return m.Size()
}
func (m *Escrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Escrow.DiscardUnknown(m)
}

var xxx_messageInfo_Escrow proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("starnamed.x.escrow.v1beta1.EscrowState", EscrowState_name, EscrowState_value)
	proto.RegisterType((*Escrow)(nil), "starnamed.x.escrow.v1beta1.Escrow")
}

func init() { proto.RegisterFile("iov/escrow/v1beta1/types.proto", fileDescriptor_06970306f8aa7966) }

var fileDescriptor_06970306f8aa7966 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x8f, 0xd2, 0x4e,
	0x18, 0xc7, 0x3b, 0x2c, 0xf0, 0x63, 0x87, 0x9f, 0x1b, 0x9c, 0x20, 0xe9, 0xf6, 0x50, 0x1a, 0x2f,
	0x5b, 0x35, 0x4c, 0x5d, 0xbc, 0x99, 0x78, 0x58, 0xa0, 0x26, 0x26, 0xba, 0x6c, 0x0a, 0xc6, 0xc4,
	0x0b, 0xe9, 0x9f, 0x07, 0xac, 0x96, 0x0e, 0xe9, 0x14, 0x5c, 0xde, 0xc1, 0x86, 0x93, 0x6f, 0x80,
	0xc4, 0xc4, 0x9b, 0x67, 0x5f, 0x04, 0xf1, 0xc4, 0xd1, 0x93, 0x7f, 0xe0, 0xe2, 0xcb, 0x30, 0x74,
	0xda, 0x75, 0x37, 0xd1, 0xc4, 0x53, 0xe7, 0xfb, 0x3c, 0xdf, 0xcf, 0xe4, 0x99, 0xef, 0x74, 0xb0,
	0xea, 0xb3, 0x99, 0x01, 0xdc, 0x8d, 0xd8, 0x5b, 0x63, 0x76, 0xec, 0x40, 0x6c, 0x1f, 0x1b, 0xf1,
	0x7c, 0x02, 0x9c, 0x4e, 0x22, 0x16, 0x33, 0xa2, 0xf0, 0xd8, 0x8e, 0x42, 0x7b, 0x0c, 0x1e, 0x3d,
	0xa7, 0xc2, 0x47, 0x53, 0x9f, 0xa2, 0xed, 0xd8, 0xac, 0xff, 0x27, 0x5a, 0x51, 0x5d, 0xc6, 0xc7,
	0x8c, 0x1b, 0x8e, 0xcd, 0x7f, 0x1b, 0x5c, 0xe6, 0x87, 0xff, 0xd8, 0xaf, 0x8e, 0xd8, 0x88, 0x25,
	0x4b, 0x63, 0xb7, 0x4a, 0xab, 0x87, 0x23, 0xc6, 0x46, 0x01, 0x18, 0x89, 0x72, 0xa6, 0x43, 0xc3,
	0x0e, 0xe7, 0x59, 0x4b, 0x6c, 0x38, 0x10, 0x8c, 0x10, 0xa2, 0x75, 0x7b, 0x9d, 0xc3, 0x45, 0x33,
	0x39, 0x00, 0x39, 0xc0, 0x39, 0xdf, 0x93, 0x91, 0x86, 0xf4, 0x7d, 0x2b, 0xe7, 0x7b, 0xa4, 0x86,
	0x8b, 0x1c, 0x82, 0x00, 0x22, 0x39, 0x97, 0xd4, 0x52, 0x45, 0xaa, 0xb8, 0xe0, 0x4c, 0xe7, 0x10,
	0xc9, 0x7b, 0x49, 0x59, 0x08, 0xd2, 0xc1, 0x45, 0xe6, 0xbc, 0x06, 0x37, 0x96, 0xf3, 0x1a, 0xd2,
	0xcb, 0xcd, 0x2a, 0x15, 0xf3, 0xd0, 0x6c, 0x1e, 0x7a, 0x12, 0xce, 0x5b, 0xb5, 0xcf, 0x9f, 0x1a,
	0xa4, 0x1f, 0xd9, 0x21, 0x1f, 0x42, 0x64, 0x3b, 0x01, 0x74, 0x13, 0xc6, 0x4a, 0x59, 0x62, 0xe3,
	0xc2, 0x24, 0xf2, 0x5d, 0x90, 0x0b, 0xda, 0x9e, 0x5e, 0x6e, 0x1e, 0xd2, 0x74, 0xd8, 0x5d, 0x14,
	0x59, 0xc2, 0xb4, 0xcd, 0xfc, 0xb0, 0x75, 0x7f, 0xf5, 0xb5, 0x2e, 0x7d, 0xfc, 0x56, 0xd7, 0x47,
	0x7e, 0xfc, 0x6a, 0xea, 0x50, 0x97, 0x8d, 0xd3, 0x93, 0xa5, 0x9f, 0x06, 0xf7, 0xde, 0xa4, 0xb1,
	0xef, 0x00, 0x6e, 0x89, 0x9d, 0xc9, 0x23, 0x5c, 0xe0, 0xb1, 0x1d, 0x83, 0x5c, 0xd4, 0x90, 0x7e,
	0xd0, 0x3c, 0xa2, 0x7f, 0xbf, 0x4b, 0x2a, 0x92, 0xe9, 0xed, 0xec, 0x96, 0xa0, 0x88, 0x82, 0x4b,
	0x1e, 0xd8, 0x5e, 0xe0, 0x87, 0x20, 0xff, 0xa7, 0x21, 0x3d, 0x6f, 0x5d, 0xea, 0x87, 0xf9, 0x9f,
	0xef, 0xeb, 0xe8, 0xee, 0x05, 0xc2, 0xe5, 0x2b, 0x20, 0xa9, 0xe3, 0x9b, 0x66, 0xaf, 0x6d, 0x75,
	0x5f, 0x0c, 0x7a, 0xfd, 0x93, 0xbe, 0x39, 0xe8, 0x9e, 0x99, 0xa7, 0x15, 0x49, 0x29, 0x2d, 0x96,
	0x5a, 0xbe, 0x3b, 0x81, 0x90, 0xdc, 0xc1, 0xb5, 0x6b, 0x86, 0x76, 0xf7, 0xd9, 0xd9, 0x53, 0xb3,
	0x6f, 0x76, 0x2a, 0x48, 0xb9, 0xb1, 0x58, 0x6a, 0xfb, 0x6d, 0x36, 0x9e, 0x04, 0x10, 0x83, 0x47,
	0x8e, 0xf0, 0xad, 0x6b, 0x56, 0xcb, 0x7c, 0xfc, 0xfc, 0xb4, 0x63, 0x76, 0x2a, 0x39, 0xe5, 0xff,
	0xc5, 0x52, 0x2b, 0x59, 0x30, 0x9c, 0x86, 0x1e, 0x78, 0x4a, 0xfe, 0xe2, 0x83, 0x2a, 0xb5, 0x9e,
	0xac, 0x7e, 0xa8, 0xd2, 0x6a, 0xa3, 0xa2, 0xf5, 0x46, 0x45, 0xdf, 0x37, 0x2a, 0x7a, 0xb7, 0x55,
	0xa5, 0xf5, 0x56, 0x95, 0xbe, 0x6c, 0x55, 0xe9, 0xe5, 0xbd, 0x2b, 0xd1, 0xf9, 0x6c, 0xd6, 0x60,
	0x21, 0x5c, 0xfe, 0xb8, 0x9e, 0x71, 0x9e, 0x3d, 0x80, 0x24, 0x43, 0xa7, 0x98, 0xdc, 0xe3, 0x83,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0x09, 0x34, 0x3b, 0x1b, 0x03, 0x00, 0x00,
}

func (this *Escrow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Escrow)
	if !ok {
		that2, ok := that.(Escrow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Seller != that1.Seller {
		return false
	}
	if this.Buyer != that1.Buyer {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if len(this.Price) != len(that1.Price) {
		return false
	}
	for i := range this.Price {
		if !this.Price[i].Equal(&that1.Price[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	return true
}
func (m *Escrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Escrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Escrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deadline != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Escrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.Deadline != 0 {
		n += 1 + sovTypes(uint64(m.Deadline))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Escrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Escrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Escrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types1.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= EscrowState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
