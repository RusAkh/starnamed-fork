// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iov/configuration/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Config is the configuration of the network
type Config struct {
	// Configurer is the configuration owner, the addresses allowed to handle fees and register domains with no superuser
	Configurer string `protobuf:"bytes,1,opt,name=configurer,proto3" json:"configurer,omitempty" yaml:"configurer"`
	// ValidDomainName defines a regexp that determines if a domain name is valid or not
	ValidDomainName string `protobuf:"bytes,2,opt,name=valid_domain_name,json=validDomainName,proto3" json:"valid_domain_name,omitempty" yaml:"valid_domain_name"`
	// ValidAccountName defines a regexp that determines if an account name is valid or not
	ValidAccountName string `protobuf:"bytes,3,opt,name=valid_account_name,json=validAccountName,proto3" json:"valid_account_name,omitempty" yaml:"valid_account_name"`
	// ValidURI defines a regexp that determines if resource uri is valid or not
	ValidURI string `protobuf:"bytes,4,opt,name=valid_uri,json=validUri,proto3" json:"valid_uri,omitempty" yaml:"valid_uri"`
	// ValidResource determines a regexp for a resource content
	ValidResource string `protobuf:"bytes,5,opt,name=valid_resource,json=validResource,proto3" json:"valid_resource,omitempty" yaml:"valid_resource"`
	// DomainRenewalPeriod defines the duration of the domain renewal period in seconds
	DomainRenewalPeriod time.Duration `protobuf:"bytes,6,opt,name=domain_renewal_period,json=domainRenewalPeriod,proto3,stdduration" json:"domain_renewal_period" yaml:"domain_renewal_period"`
	// DomainRenewalCountMax defines maximum number of domain renewals a user can do
	DomainRenewalCountMax uint32 `protobuf:"varint,7,opt,name=domain_renewal_count_max,json=domainRenewalCountMax,proto3" json:"domain_renewal_count_max,omitempty" yaml:"domain_renewal_count_max"`
	// DomainGracePeriod defines the grace period for a domain deletion in seconds
	DomainGracePeriod time.Duration `protobuf:"bytes,8,opt,name=domain_grace_period,json=domainGracePeriod,proto3,stdduration" json:"domain_grace_period" yaml:"domain_grace_period"`
	// AccountRenewalPeriod defines the duration of the account renewal period in seconds
	AccountRenewalPeriod time.Duration `protobuf:"bytes,9,opt,name=account_renewal_period,json=accountRenewalPeriod,proto3,stdduration" json:"account_renewal_period" yaml:"account_renewal_period"`
	// AccountRenewalCountMax defines maximum number of account renewals a user can do
	AccountRenewalCountMax uint32 `protobuf:"varint,10,opt,name=account_renewal_count_max,json=accountRenewalCountMax,proto3" json:"account_renewal_count_max,omitempty" yaml:"account_renewal_count_max"`
	// DomainGracePeriod defines the grace period for a domain deletion in seconds
	AccountGracePeriod time.Duration `protobuf:"bytes,11,opt,name=account_grace_period,json=accountGracePeriod,proto3,stdduration" json:"account_grace_period" yaml:"account_grace_period"`
	// ResourcesMax defines maximum number of resources could be saved under an account
	ResourcesMax uint32 `protobuf:"varint,12,opt,name=resources_max,json=resourcesMax,proto3" json:"resources_max,omitempty" yaml:"resources_max"`
	// CertificateSizeMax defines maximum size of a certificate that could be saved under an account
	CertificateSizeMax uint64 `protobuf:"varint,13,opt,name=certificate_size_max,json=certificateSizeMax,proto3" json:"certificate_size_max,omitempty" yaml:"certificate_size_max"`
	// CertificateCountMax defines maximum number of certificates that could be saved under an account
	CertificateCountMax uint32 `protobuf:"varint,14,opt,name=certificate_count_max,json=certificateCountMax,proto3" json:"certificate_count_max,omitempty" yaml:"certificate_count_max"`
	// MetadataSizeMax defines maximum size of metadata that could be saved under an account
	MetadataSizeMax uint64 `protobuf:"varint,15,opt,name=metadata_size_max,json=metadataSizeMax,proto3" json:"metadata_size_max,omitempty" yaml:"metadata_size_max"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b15c914656dc9a, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetConfigurer() string {
	if m != nil {
		return m.Configurer
	}
	return ""
}

func (m *Config) GetValidDomainName() string {
	if m != nil {
		return m.ValidDomainName
	}
	return ""
}

func (m *Config) GetValidAccountName() string {
	if m != nil {
		return m.ValidAccountName
	}
	return ""
}

func (m *Config) GetValidURI() string {
	if m != nil {
		return m.ValidURI
	}
	return ""
}

func (m *Config) GetValidResource() string {
	if m != nil {
		return m.ValidResource
	}
	return ""
}

func (m *Config) GetDomainRenewalPeriod() time.Duration {
	if m != nil {
		return m.DomainRenewalPeriod
	}
	return 0
}

func (m *Config) GetDomainRenewalCountMax() uint32 {
	if m != nil {
		return m.DomainRenewalCountMax
	}
	return 0
}

func (m *Config) GetDomainGracePeriod() time.Duration {
	if m != nil {
		return m.DomainGracePeriod
	}
	return 0
}

func (m *Config) GetAccountRenewalPeriod() time.Duration {
	if m != nil {
		return m.AccountRenewalPeriod
	}
	return 0
}

func (m *Config) GetAccountRenewalCountMax() uint32 {
	if m != nil {
		return m.AccountRenewalCountMax
	}
	return 0
}

func (m *Config) GetAccountGracePeriod() time.Duration {
	if m != nil {
		return m.AccountGracePeriod
	}
	return 0
}

func (m *Config) GetResourcesMax() uint32 {
	if m != nil {
		return m.ResourcesMax
	}
	return 0
}

func (m *Config) GetCertificateSizeMax() uint64 {
	if m != nil {
		return m.CertificateSizeMax
	}
	return 0
}

func (m *Config) GetCertificateCountMax() uint32 {
	if m != nil {
		return m.CertificateCountMax
	}
	return 0
}

func (m *Config) GetMetadataSizeMax() uint64 {
	if m != nil {
		return m.MetadataSizeMax
	}
	return 0
}

// Fees contains different type of fees to calculate coins to detract when processing different messages
type Fees struct {
	// FeeCoinDenom defines the denominator of the coin used to process fees
	FeeCoinDenom string `protobuf:"bytes,1,opt,name=fee_coin_denom,json=feeCoinDenom,proto3" json:"fee_coin_denom,omitempty" yaml:"fee_coin_denom"`
	// FeeCoinPrice defines the price of the coin
	FeeCoinPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=fee_coin_price,json=feeCoinPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_coin_price" yaml:"fee_coin_price"`
	// FeeDefault is the parameter defining the default fee
	FeeDefault github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=fee_default,json=feeDefault,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_default" yaml:"fee_default"`
	// RegisterAccountClosed is the fee to be paid to register an account in a closed domain
	RegisterAccountClosed github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=register_account_closed,json=registerAccountClosed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_account_closed" yaml:"register_account_closed"`
	// RegisterAccountOpen is the fee to be paid to register an account in an open domain
	RegisterAccountOpen github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=register_account_open,json=registerAccountOpen,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_account_open" yaml:"register_account_open"`
	// TransferAccountClosed is the fee to be paid to register an account in a closed domain
	TransferAccountClosed github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=transfer_account_closed,json=transferAccountClosed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"transfer_account_closed" yaml:"transfer_account_closed"`
	// TransferAccountOpen is the fee to be paid to register an account in an open domain
	TransferAccountOpen github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=transfer_account_open,json=transferAccountOpen,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"transfer_account_open" yaml:"transfer_account_open"`
	// ReplaceAccountResources is the fee to be paid to replace account's resources
	ReplaceAccountResources github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=replace_account_resources,json=replaceAccountResources,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"replace_account_resources" yaml:"replace_account_resources"`
	// AddAccountCertificate is the fee to be paid to add a certificate to an account
	AddAccountCertificate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=add_account_certificate,json=addAccountCertificate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"add_account_certificate" yaml:"add_account_certificate"`
	// DelAccountCertificate is the feed to be paid to delete a certificate in an account
	DelAccountCertificate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=del_account_certificate,json=delAccountCertificate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"del_account_certificate" yaml:"del_account_certificate"`
	// SetAccountMetadata is the fee to be paid to set account's metadata
	SetAccountMetadata github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=set_account_metadata,json=setAccountMetadata,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"set_account_metadata" yaml:"set_account_metadata"`
	// RegisterDomain1 is the fee to be paid to register a domain with one character
	RegisterDomain1 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=register_domain_1,json=registerDomain1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_1" yaml:"register_domain_1"`
	// RegisterDomain2 is the fee to be paid to register a domain with two characters
	RegisterDomain2 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=register_domain_2,json=registerDomain2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_2" yaml:"register_domain_2"`
	// RegisterDomain3 is the fee to be paid to register a domain with three characters
	RegisterDomain3 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=register_domain_3,json=registerDomain3,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_3" yaml:"register_domain_3"`
	// RegisterDomain4 is the fee to be paid to register a domain with four characters
	RegisterDomain4 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=register_domain_4,json=registerDomain4,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_4" yaml:"register_domain_4"`
	// RegisterDomain5 is the fee to be paid to register a domain with five characters
	RegisterDomain5 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=register_domain_5,json=registerDomain5,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_5" yaml:"register_domain_5"`
	// RegisterDomainDefault is the fee to be paid to register a domain with more than five characters
	RegisterDomainDefault github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=register_domain_default,json=registerDomainDefault,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_domain_default" yaml:"register_domain_default"`
	// register_open_domain_multiplier is the multiplication applied to fees in register domain operations if they're of open type
	RegisterOpenDomainMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=register_open_domain_multiplier,json=registerOpenDomainMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"register_open_domain_multiplier" yaml:"register_open_domain_multiplier"`
	// transfer_domain_closed is the fee to be paid to transfer a closed domain
	TransferDomainClosed github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,19,opt,name=transfer_domain_closed,json=transferDomainClosed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"transfer_domain_closed" yaml:"transfer_domain_closed"`
	// transfer_domain_open is the fee to be paid to transfer open domains
	TransferDomainOpen github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,20,opt,name=transfer_domain_open,json=transferDomainOpen,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"transfer_domain_open" yaml:"transfer_domain_open"`
	// renew_domain_open is the fee to be paid to renew an open domain
	RenewDomainOpen github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=renew_domain_open,json=renewDomainOpen,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"renew_domain_open" yaml:"renew_domain_open"`
	// create_escrow is the fee to be paid to create an escrow
	CreateEscrow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=create_escrow,json=createEscrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"create_escrow" yaml:"create_escrow"`
	// update_escrow is the fee to be paid to update an escrow
	UpdateEscrow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,23,opt,name=update_escrow,json=updateEscrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"update_escrow" yaml:"update_escrow"`
	// transfer_to_escrow is the fee to be paid to transfer coins to an escrow
	TransferToEscrow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,24,opt,name=transfer_to_escrow,json=transferToEscrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"transfer_to_escrow" yaml:"transfer_to_escrow"`
	// refund_escrow is the fee to be paid to refund the account or domain placed in an escrow
	RefundEscrow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,25,opt,name=refund_escrow,json=refundEscrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"refund_escrow" yaml:"refund_escrow"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b15c914656dc9a, []int{1}
}
func (m *Fees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}
func (m *Fees) XXX_Size() int {
	return m.Size()
}
func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetFeeCoinDenom() string {
	if m != nil {
		return m.FeeCoinDenom
	}
	return ""
}

// GenesisState - genesis state of x/configuration
type GenesisState struct {
	Config Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config" yaml:"config"`
	Fees   Fees   `protobuf:"bytes,2,opt,name=fees,proto3" json:"fees" yaml:"fees"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b15c914656dc9a, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetConfig() Config {
	if m != nil {
		return m.Config
	}
	return Config{}
}

func (m *GenesisState) GetFees() Fees {
	if m != nil {
		return m.Fees
	}
	return Fees{}
}

func init() {
	proto.RegisterType((*Config)(nil), "wasmd.x.configuration.v1beta1.Config")
	proto.RegisterType((*Fees)(nil), "wasmd.x.configuration.v1beta1.Fees")
	proto.RegisterType((*GenesisState)(nil), "wasmd.x.configuration.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("iov/configuration/v1beta1/types.proto", fileDescriptor_67b15c914656dc9a)
}

var fileDescriptor_67b15c914656dc9a = []byte{
	// 1415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0xa1, 0x74, 0xeb, 0x6d, 0xbb, 0xb6, 0x6e, 0xd2, 0x39, 0xa3, 0x8d, 0xa3, 0x3b, 0x36,
	0xca, 0xc3, 0x12, 0x35, 0x6d, 0x5f, 0x90, 0x26, 0x58, 0x5a, 0xb6, 0xc1, 0xe8, 0x56, 0xee, 0x36,
	0x84, 0x10, 0x28, 0x72, 0xed, 0x93, 0x60, 0x2d, 0xb6, 0x83, 0xed, 0xb4, 0xdd, 0x5e, 0x26, 0x21,
	0x21, 0xc1, 0x0b, 0x82, 0x37, 0xde, 0x78, 0x43, 0x3c, 0xf3, 0x29, 0xf6, 0xb8, 0x47, 0xc4, 0x83,
	0x41, 0xed, 0x37, 0xc8, 0x27, 0x40, 0x3e, 0xf7, 0xfa, 0x5f, 0xe2, 0x50, 0x45, 0xe9, 0x53, 0x7b,
	0xcf, 0x9f, 0xdf, 0xef, 0x77, 0xcf, 0x75, 0xce, 0xf1, 0x35, 0xb9, 0x61, 0x3a, 0x47, 0x35, 0xdd,
	0xb1, 0x5b, 0x66, 0xbb, 0xe7, 0x6a, 0xbe, 0xe9, 0xd8, 0xb5, 0xa3, 0xcd, 0x43, 0xf0, 0xb5, 0xcd,
	0x9a, 0xff, 0xbc, 0x0b, 0x5e, 0xb5, 0xeb, 0x3a, 0xbe, 0x23, 0xaf, 0x1f, 0x6b, 0x9e, 0x65, 0x54,
	0x4f, 0xaa, 0x99, 0xd0, 0xaa, 0x08, 0xbd, 0x56, 0x68, 0x3b, 0x6d, 0x07, 0x23, 0x6b, 0xe1, 0x7f,
	0x3c, 0xe9, 0x5a, 0xb9, 0xed, 0x38, 0xed, 0x0e, 0xd4, 0x70, 0x75, 0xd8, 0x6b, 0xd5, 0x8c, 0x28,
	0x0f, 0x2d, 0xf4, 0x77, 0x42, 0x66, 0x76, 0x11, 0x4f, 0xde, 0x21, 0x24, 0x42, 0x06, 0x57, 0x91,
	0x2a, 0xd2, 0xc6, 0x6c, 0xa3, 0xd8, 0x0f, 0xd4, 0xe5, 0xe7, 0x9a, 0xd5, 0x79, 0x9f, 0x26, 0x3e,
	0xca, 0x52, 0x81, 0xf2, 0x7d, 0xb2, 0x7c, 0xa4, 0x75, 0x4c, 0xa3, 0x69, 0x38, 0x96, 0x66, 0xda,
	0x4d, 0x5b, 0xb3, 0x40, 0x79, 0x03, 0xb3, 0xd7, 0xfa, 0x81, 0xaa, 0xf0, 0xec, 0xa1, 0x10, 0xca,
	0x16, 0xd1, 0xb6, 0x87, 0xa6, 0x87, 0x9a, 0x05, 0xf2, 0x03, 0x22, 0xf3, 0x30, 0x4d, 0xd7, 0x9d,
	0x9e, 0xed, 0x73, 0xa8, 0x37, 0x11, 0x6a, 0xbd, 0x1f, 0xa8, 0xa5, 0x34, 0x54, 0x3a, 0x86, 0xb2,
	0x25, 0x34, 0xde, 0xe1, 0x36, 0x04, 0xbb, 0x4d, 0x66, 0x79, 0x60, 0xcf, 0x35, 0x95, 0x69, 0xc4,
	0xa8, 0x9c, 0x06, 0xea, 0xe5, 0xcf, 0x43, 0xe3, 0x53, 0xf6, 0x71, 0x3f, 0x50, 0x97, 0xd2, 0x78,
	0x3d, 0xd7, 0xa4, 0xec, 0x32, 0xfe, 0xff, 0xd4, 0x35, 0xe5, 0x0f, 0xc9, 0x15, 0x6e, 0x77, 0xc1,
	0x73, 0x7a, 0xae, 0x0e, 0xca, 0x5b, 0x88, 0x51, 0xea, 0x07, 0x6a, 0x31, 0x9d, 0x17, 0xf9, 0x29,
	0x5b, 0x40, 0x03, 0x13, 0x6b, 0xf9, 0x98, 0x14, 0xc5, 0x76, 0x5d, 0xb0, 0xe1, 0x58, 0xeb, 0x34,
	0xbb, 0xe0, 0x9a, 0x8e, 0xa1, 0xcc, 0x54, 0xa4, 0x8d, 0xb9, 0x7a, 0xa9, 0xca, 0x4f, 0xa6, 0x1a,
	0x9d, 0x4c, 0x75, 0x4f, 0x9c, 0x4c, 0x63, 0xe3, 0x55, 0xa0, 0x4e, 0xf5, 0x03, 0x75, 0x8d, 0xf3,
	0xe4, 0xa2, 0xd0, 0x5f, 0xff, 0x51, 0x25, 0xb6, 0xc2, 0x7d, 0x8c, 0xbb, 0x0e, 0xd0, 0x23, 0x7f,
	0x45, 0x94, 0x81, 0x14, 0x5e, 0x29, 0x4b, 0x3b, 0x51, 0x2e, 0x55, 0xa4, 0x8d, 0x85, 0xc6, 0xf5,
	0x7e, 0xa0, 0xaa, 0xb9, 0xe0, 0x71, 0x24, 0x65, 0xc5, 0x0c, 0xf6, 0x6e, 0xe8, 0xd8, 0xd7, 0x4e,
	0xe4, 0x6f, 0x89, 0x20, 0x6d, 0xb6, 0x5d, 0x4d, 0x87, 0x68, 0x53, 0x97, 0xcf, 0xdb, 0xd4, 0x4d,
	0xb1, 0xa9, 0x6b, 0x19, 0xde, 0x34, 0x06, 0xdf, 0xd2, 0x32, 0xf7, 0xdc, 0x0b, 0x1d, 0x62, 0x43,
	0x2f, 0xc8, 0x6a, 0x74, 0xda, 0x03, 0xa5, 0x9c, 0x3d, 0x8f, 0xf5, 0x3d, 0xc1, 0xba, 0xce, 0x59,
	0xf3, 0x61, 0x38, 0x71, 0x41, 0x38, 0xb3, 0xc5, 0x6c, 0x92, 0xd2, 0x60, 0x52, 0x52, 0x4d, 0x82,
	0xd5, 0x7c, 0xa7, 0x1f, 0xa8, 0x95, 0x7c, 0xfc, 0x54, 0x39, 0x57, 0xb3, 0xf0, 0x71, 0x3d, 0x7d,
	0x12, 0x11, 0x67, 0x0b, 0x3a, 0x77, 0xde, 0xd6, 0xde, 0x15, 0x5b, 0x7b, 0x3b, 0x4b, 0x3d, 0x5c,
	0x51, 0x59, 0xb8, 0xd2, 0x25, 0xbd, 0x4d, 0x16, 0xa2, 0x07, 0xd7, 0xc3, 0xad, 0xcc, 0xe3, 0x56,
	0x94, 0x7e, 0xa0, 0x16, 0x38, 0x5e, 0xc6, 0x4d, 0xd9, 0x7c, 0xbc, 0x0e, 0x45, 0x7f, 0x46, 0x0a,
	0x3a, 0xb8, 0xbe, 0xd9, 0x32, 0x75, 0xcd, 0x87, 0xa6, 0x67, 0xbe, 0x00, 0x44, 0x59, 0xa8, 0x48,
	0x1b, 0xd3, 0x0d, 0x35, 0x51, 0x95, 0x17, 0x45, 0x99, 0x9c, 0x32, 0x3f, 0x36, 0x5f, 0x40, 0x08,
	0xf9, 0x84, 0x14, 0xd3, 0xc1, 0x49, 0x91, 0xaf, 0xa0, 0xb2, 0x4a, 0xf2, 0x7b, 0xc8, 0x0d, 0xa3,
	0x6c, 0x25, 0x65, 0x8f, 0xab, 0x7b, 0x9f, 0x2c, 0x5b, 0xe0, 0x6b, 0x86, 0xe6, 0x6b, 0x89, 0xca,
	0x45, 0x54, 0x99, 0x6a, 0x4e, 0x43, 0x21, 0x94, 0x2d, 0x46, 0x36, 0xa1, 0x8f, 0xfe, 0x52, 0x22,
	0xd3, 0x77, 0x01, 0x3c, 0xf9, 0x03, 0x72, 0xa5, 0x05, 0x21, 0xb3, 0x69, 0x37, 0x0d, 0xb0, 0x1d,
	0x4b, 0xb4, 0xca, 0x54, 0x67, 0xc8, 0xfa, 0x29, 0x9b, 0x6f, 0x01, 0xec, 0x3a, 0xa6, 0xbd, 0x17,
	0x2e, 0x65, 0x2b, 0x05, 0xd0, 0x75, 0x4d, 0x3d, 0xea, 0x96, 0xf7, 0xc2, 0x03, 0xfd, 0x3b, 0x50,
	0x6f, 0xb6, 0x4d, 0xff, 0x9b, 0xde, 0x61, 0x55, 0x77, 0xac, 0x9a, 0xee, 0x78, 0x96, 0xe3, 0x89,
	0x3f, 0xb7, 0x3c, 0xe3, 0x99, 0x98, 0x08, 0x7b, 0xa0, 0xe7, 0xd0, 0x21, 0x5a, 0x42, 0x77, 0x10,
	0x2e, 0x65, 0x20, 0x73, 0x61, 0x80, 0x01, 0x2d, 0xad, 0xd7, 0xf1, 0x45, 0x3b, 0xdd, 0x1b, 0x9b,
	0x4b, 0x4e, 0xb8, 0x04, 0x14, 0x65, 0xa4, 0x05, 0xb0, 0xc7, 0x17, 0xf2, 0x0f, 0x12, 0xb9, 0xea,
	0x42, 0xdb, 0xf4, 0x7c, 0x70, 0xe3, 0xe6, 0xac, 0x77, 0x1c, 0x0f, 0x0c, 0xd1, 0x7e, 0x0f, 0xc6,
	0xe6, 0x2c, 0x47, 0x8f, 0x62, 0x2e, 0x2c, 0x65, 0xc5, 0xc8, 0x23, 0x1a, 0xff, 0x2e, 0xda, 0xe5,
	0xef, 0x24, 0x52, 0x1c, 0xca, 0x71, 0xba, 0x60, 0x8b, 0x1e, 0xfe, 0x70, 0x6c, 0x21, 0x6b, 0x23,
	0x84, 0x84, 0xa0, 0x94, 0xad, 0x0c, 0xc8, 0x78, 0xd4, 0x05, 0x1b, 0xeb, 0xe1, 0xbb, 0x9a, 0xed,
	0xb5, 0x86, 0xeb, 0x31, 0x33, 0x59, 0x3d, 0x46, 0xc0, 0x52, 0x56, 0x8c, 0x3c, 0xc3, 0xf5, 0x18,
	0xca, 0xc1, 0x7a, 0x5c, 0x9a, 0xac, 0x1e, 0xb9, 0xa0, 0x94, 0xad, 0x0c, 0xc8, 0xc0, 0x7a, 0xfc,
	0x24, 0x91, 0x92, 0x0b, 0xdd, 0x4e, 0xd8, 0x9d, 0x92, 0x36, 0x29, 0x7a, 0x0a, 0x8e, 0x8f, 0xd9,
	0x06, 0x1b, 0x5b, 0x48, 0x25, 0x3a, 0x98, 0x11, 0xc0, 0x94, 0x5d, 0x15, 0xbe, 0x3b, 0x51, 0xfb,
	0x15, 0x1e, 0x3c, 0x20, 0xcd, 0x48, 0x5e, 0x24, 0x52, 0xed, 0x03, 0xe7, 0xca, 0x04, 0x07, 0x34,
	0x02, 0x96, 0xb2, 0xa2, 0x66, 0x44, 0x2f, 0x29, 0xbb, 0x89, 0x1d, 0xa5, 0x18, 0xd0, 0xc9, 0x95,
	0x42, 0x26, 0x93, 0x32, 0x02, 0x36, 0x1c, 0xef, 0xd0, 0xc9, 0x91, 0xf2, 0x92, 0x14, 0x3c, 0xf0,
	0xe3, 0x94, 0xa8, 0x0b, 0xe2, 0x38, 0x9a, 0x6d, 0xec, 0x8f, 0x2d, 0x43, 0xcc, 0x81, 0x3c, 0x4c,
	0xca, 0x64, 0x0f, 0x7c, 0xa1, 0x61, 0x5f, 0x18, 0xe5, 0x1f, 0x25, 0xb2, 0x1c, 0xff, 0xce, 0xc4,
	0x5b, 0xc2, 0x26, 0x8e, 0xa7, 0xd9, 0xc6, 0xd7, 0xe3, 0xd1, 0x9f, 0x06, 0xea, 0x22, 0x13, 0x50,
	0xfc, 0x35, 0x73, 0x33, 0xe9, 0xf9, 0x43, 0x1c, 0x94, 0x2d, 0xba, 0xd9, 0xe0, 0x5c, 0x2d, 0x75,
	0x1c, 0x72, 0x17, 0xa0, 0xa5, 0x3e, 0x5a, 0x4b, 0x7d, 0x48, 0x4b, 0x3d, 0x57, 0xcb, 0x16, 0x0e,
	0xc7, 0x0b, 0xd0, 0xb2, 0x35, 0x5a, 0xcb, 0xd6, 0x90, 0x96, 0xad, 0x5c, 0x2d, 0xdb, 0x38, 0x56,
	0x2f, 0x40, 0xcb, 0xf6, 0x68, 0x2d, 0xdb, 0x43, 0x5a, 0xb6, 0x73, 0xb5, 0xec, 0x28, 0x4b, 0x17,
	0xa3, 0x65, 0x67, 0xb4, 0x96, 0x9d, 0x21, 0x2d, 0x3b, 0xd9, 0x19, 0x28, 0xe2, 0xa2, 0xb9, 0xbb,
	0x7c, 0x41, 0x33, 0x30, 0x0b, 0x9b, 0x9a, 0x81, 0x5c, 0x44, 0x34, 0x8e, 0x7f, 0x93, 0x88, 0x1a,
	0xe7, 0x84, 0x6d, 0x39, 0x4a, 0xb4, 0x7a, 0x1d, 0xdf, 0xec, 0x76, 0x4c, 0x70, 0x15, 0x19, 0x25,
	0x7d, 0x31, 0xb6, 0xa4, 0x9b, 0x03, 0x92, 0xf2, 0xe1, 0x29, 0x5b, 0x8b, 0x22, 0xc2, 0x01, 0xc0,
	0xe5, 0xed, 0xc7, 0x6e, 0xf9, 0x7b, 0x89, 0xac, 0xc6, 0x03, 0x44, 0x64, 0x8b, 0xf9, 0xb8, 0x82,
	0xc2, 0x1e, 0x8d, 0x2d, 0x6c, 0x7d, 0x60, 0x2c, 0x65, 0x50, 0x29, 0x2b, 0x44, 0x0e, 0xae, 0x45,
	0x4c, 0xc7, 0x97, 0xa4, 0x30, 0x98, 0x80, 0xb3, 0xb1, 0x30, 0x59, 0xc7, 0xcb, 0xc3, 0xa4, 0x4c,
	0xce, 0x4a, 0xc0, 0xc9, 0x78, 0x14, 0x3e, 0xc0, 0x36, 0x1c, 0x67, 0xd8, 0x8b, 0xc8, 0xfe, 0xc9,
	0xd8, 0xec, 0xf1, 0xd3, 0x3a, 0x00, 0x88, 0x4f, 0xab, 0x0d, 0xc7, 0x29, 0xde, 0x67, 0x64, 0x41,
	0x77, 0x21, 0x7c, 0x8b, 0x06, 0x4f, 0x77, 0x9d, 0x63, 0x65, 0x15, 0x39, 0xef, 0x8e, 0xcd, 0x29,
	0x6e, 0x0c, 0x19, 0x30, 0xca, 0xe6, 0xf9, 0xfa, 0x23, 0x5c, 0x86, 0x64, 0xbd, 0xae, 0x91, 0x22,
	0xbb, 0x3a, 0x19, 0x59, 0x06, 0x8c, 0xb2, 0x79, 0xbe, 0x16, 0x64, 0xcf, 0x49, 0x5c, 0xe7, 0xa6,
	0xef, 0x44, 0x8c, 0x0a, 0x32, 0x3e, 0x18, 0x9b, 0xb1, 0x34, 0x70, 0xa0, 0x31, 0x22, 0x65, 0x4b,
	0x91, 0xf1, 0x89, 0x93, 0xec, 0xd3, 0x85, 0x56, 0xcf, 0x36, 0x22, 0xd6, 0xd2, 0x64, 0xfb, 0xcc,
	0x80, 0xe1, 0x35, 0x2c, 0x5c, 0x73, 0x32, 0xfa, 0xa7, 0x44, 0xe6, 0xef, 0x81, 0x0d, 0x9e, 0xe9,
	0x3d, 0xf6, 0xc3, 0xe9, 0xfd, 0x84, 0xcc, 0xf0, 0x2f, 0x33, 0x78, 0x27, 0x99, 0xab, 0xdf, 0xa8,
	0xfe, 0xef, 0x37, 0xa3, 0x2a, 0xff, 0xf2, 0xd3, 0x28, 0x8a, 0xab, 0xe4, 0x42, 0xfa, 0x4b, 0x0f,
	0x65, 0x02, 0x4b, 0xfe, 0x94, 0x4c, 0xb7, 0x00, 0x3c, 0xbc, 0xa6, 0xcc, 0xd5, 0xaf, 0x9f, 0x83,
	0x19, 0x5e, 0x92, 0x1a, 0x2b, 0x02, 0x71, 0x2e, 0xbe, 0x35, 0x78, 0x94, 0x21, 0x4a, 0xe3, 0xe0,
	0x8f, 0xd3, 0xb2, 0xf4, 0xea, 0xb4, 0x2c, 0xbd, 0x3e, 0x2d, 0x4b, 0xff, 0x9e, 0x96, 0xa5, 0x9f,
	0xcf, 0xca, 0x53, 0xaf, 0xcf, 0xca, 0x53, 0x7f, 0x9d, 0x95, 0xa7, 0xbe, 0xac, 0xa7, 0x0a, 0x64,
	0x3a, 0x47, 0xb7, 0x1c, 0x1b, 0x6a, 0x9e, 0xaf, 0xb9, 0xb6, 0x66, 0x81, 0x51, 0x3b, 0x19, 0xf8,
	0x4c, 0x86, 0x05, 0x3b, 0x9c, 0xc1, 0xcb, 0xf1, 0xd6, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef,
	0xd9, 0xac, 0x20, 0x48, 0x13, 0x00, 0x00,
}

func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Configurer != that1.Configurer {
		return false
	}
	if this.ValidDomainName != that1.ValidDomainName {
		return false
	}
	if this.ValidAccountName != that1.ValidAccountName {
		return false
	}
	if this.ValidURI != that1.ValidURI {
		return false
	}
	if this.ValidResource != that1.ValidResource {
		return false
	}
	if this.DomainRenewalPeriod != that1.DomainRenewalPeriod {
		return false
	}
	if this.DomainRenewalCountMax != that1.DomainRenewalCountMax {
		return false
	}
	if this.DomainGracePeriod != that1.DomainGracePeriod {
		return false
	}
	if this.AccountRenewalPeriod != that1.AccountRenewalPeriod {
		return false
	}
	if this.AccountRenewalCountMax != that1.AccountRenewalCountMax {
		return false
	}
	if this.AccountGracePeriod != that1.AccountGracePeriod {
		return false
	}
	if this.ResourcesMax != that1.ResourcesMax {
		return false
	}
	if this.CertificateSizeMax != that1.CertificateSizeMax {
		return false
	}
	if this.CertificateCountMax != that1.CertificateCountMax {
		return false
	}
	if this.MetadataSizeMax != that1.MetadataSizeMax {
		return false
	}
	return true
}
func (this *Fees) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fees)
	if !ok {
		that2, ok := that.(Fees)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FeeCoinDenom != that1.FeeCoinDenom {
		return false
	}
	if !this.FeeCoinPrice.Equal(that1.FeeCoinPrice) {
		return false
	}
	if !this.FeeDefault.Equal(that1.FeeDefault) {
		return false
	}
	if !this.RegisterAccountClosed.Equal(that1.RegisterAccountClosed) {
		return false
	}
	if !this.RegisterAccountOpen.Equal(that1.RegisterAccountOpen) {
		return false
	}
	if !this.TransferAccountClosed.Equal(that1.TransferAccountClosed) {
		return false
	}
	if !this.TransferAccountOpen.Equal(that1.TransferAccountOpen) {
		return false
	}
	if !this.ReplaceAccountResources.Equal(that1.ReplaceAccountResources) {
		return false
	}
	if !this.AddAccountCertificate.Equal(that1.AddAccountCertificate) {
		return false
	}
	if !this.DelAccountCertificate.Equal(that1.DelAccountCertificate) {
		return false
	}
	if !this.SetAccountMetadata.Equal(that1.SetAccountMetadata) {
		return false
	}
	if !this.RegisterDomain1.Equal(that1.RegisterDomain1) {
		return false
	}
	if !this.RegisterDomain2.Equal(that1.RegisterDomain2) {
		return false
	}
	if !this.RegisterDomain3.Equal(that1.RegisterDomain3) {
		return false
	}
	if !this.RegisterDomain4.Equal(that1.RegisterDomain4) {
		return false
	}
	if !this.RegisterDomain5.Equal(that1.RegisterDomain5) {
		return false
	}
	if !this.RegisterDomainDefault.Equal(that1.RegisterDomainDefault) {
		return false
	}
	if !this.RegisterOpenDomainMultiplier.Equal(that1.RegisterOpenDomainMultiplier) {
		return false
	}
	if !this.TransferDomainClosed.Equal(that1.TransferDomainClosed) {
		return false
	}
	if !this.TransferDomainOpen.Equal(that1.TransferDomainOpen) {
		return false
	}
	if !this.RenewDomainOpen.Equal(that1.RenewDomainOpen) {
		return false
	}
	if !this.CreateEscrow.Equal(that1.CreateEscrow) {
		return false
	}
	if !this.UpdateEscrow.Equal(that1.UpdateEscrow) {
		return false
	}
	if !this.TransferToEscrow.Equal(that1.TransferToEscrow) {
		return false
	}
	if !this.RefundEscrow.Equal(that1.RefundEscrow) {
		return false
	}
	return true
}
func (this *GenesisState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisState)
	if !ok {
		that2, ok := that.(GenesisState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(&that1.Config) {
		return false
	}
	if !this.Fees.Equal(&that1.Fees) {
		return false
	}
	return true
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetadataSizeMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MetadataSizeMax))
		i--
		dAtA[i] = 0x78
	}
	if m.CertificateCountMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertificateCountMax))
		i--
		dAtA[i] = 0x70
	}
	if m.CertificateSizeMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertificateSizeMax))
		i--
		dAtA[i] = 0x68
	}
	if m.ResourcesMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ResourcesMax))
		i--
		dAtA[i] = 0x60
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.AccountGracePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.AccountGracePeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if m.AccountRenewalCountMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AccountRenewalCountMax))
		i--
		dAtA[i] = 0x50
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.AccountRenewalPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.AccountRenewalPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DomainGracePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DomainGracePeriod):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	if m.DomainRenewalCountMax != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DomainRenewalCountMax))
		i--
		dAtA[i] = 0x38
	}
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DomainRenewalPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DomainRenewalPeriod):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if len(m.ValidResource) > 0 {
		i -= len(m.ValidResource)
		copy(dAtA[i:], m.ValidResource)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidResource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidURI) > 0 {
		i -= len(m.ValidURI)
		copy(dAtA[i:], m.ValidURI)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidURI)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidAccountName) > 0 {
		i -= len(m.ValidAccountName)
		copy(dAtA[i:], m.ValidAccountName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidAccountName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidDomainName) > 0 {
		i -= len(m.ValidDomainName)
		copy(dAtA[i:], m.ValidDomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidDomainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Configurer) > 0 {
		i -= len(m.Configurer)
		copy(dAtA[i:], m.Configurer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Configurer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RefundEscrow.Size()
		i -= size
		if _, err := m.RefundEscrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size := m.TransferToEscrow.Size()
		i -= size
		if _, err := m.TransferToEscrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size := m.UpdateEscrow.Size()
		i -= size
		if _, err := m.UpdateEscrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.CreateEscrow.Size()
		i -= size
		if _, err := m.CreateEscrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.RenewDomainOpen.Size()
		i -= size
		if _, err := m.RenewDomainOpen.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.TransferDomainOpen.Size()
		i -= size
		if _, err := m.TransferDomainOpen.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.TransferDomainClosed.Size()
		i -= size
		if _, err := m.TransferDomainClosed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.RegisterOpenDomainMultiplier.Size()
		i -= size
		if _, err := m.RegisterOpenDomainMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.RegisterDomainDefault.Size()
		i -= size
		if _, err := m.RegisterDomainDefault.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.RegisterDomain5.Size()
		i -= size
		if _, err := m.RegisterDomain5.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.RegisterDomain4.Size()
		i -= size
		if _, err := m.RegisterDomain4.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.RegisterDomain3.Size()
		i -= size
		if _, err := m.RegisterDomain3.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.RegisterDomain2.Size()
		i -= size
		if _, err := m.RegisterDomain2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.RegisterDomain1.Size()
		i -= size
		if _, err := m.RegisterDomain1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.SetAccountMetadata.Size()
		i -= size
		if _, err := m.SetAccountMetadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.DelAccountCertificate.Size()
		i -= size
		if _, err := m.DelAccountCertificate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.AddAccountCertificate.Size()
		i -= size
		if _, err := m.AddAccountCertificate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ReplaceAccountResources.Size()
		i -= size
		if _, err := m.ReplaceAccountResources.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TransferAccountOpen.Size()
		i -= size
		if _, err := m.TransferAccountOpen.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TransferAccountClosed.Size()
		i -= size
		if _, err := m.TransferAccountClosed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.RegisterAccountOpen.Size()
		i -= size
		if _, err := m.RegisterAccountOpen.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RegisterAccountClosed.Size()
		i -= size
		if _, err := m.RegisterAccountClosed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeeDefault.Size()
		i -= size
		if _, err := m.FeeDefault.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FeeCoinPrice.Size()
		i -= size
		if _, err := m.FeeCoinPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeeCoinDenom) > 0 {
		i -= len(m.FeeCoinDenom)
		copy(dAtA[i:], m.FeeCoinDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FeeCoinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Configurer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidDomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidAccountName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidURI)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidResource)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DomainRenewalPeriod)
	n += 1 + l + sovTypes(uint64(l))
	if m.DomainRenewalCountMax != 0 {
		n += 1 + sovTypes(uint64(m.DomainRenewalCountMax))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DomainGracePeriod)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.AccountRenewalPeriod)
	n += 1 + l + sovTypes(uint64(l))
	if m.AccountRenewalCountMax != 0 {
		n += 1 + sovTypes(uint64(m.AccountRenewalCountMax))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.AccountGracePeriod)
	n += 1 + l + sovTypes(uint64(l))
	if m.ResourcesMax != 0 {
		n += 1 + sovTypes(uint64(m.ResourcesMax))
	}
	if m.CertificateSizeMax != 0 {
		n += 1 + sovTypes(uint64(m.CertificateSizeMax))
	}
	if m.CertificateCountMax != 0 {
		n += 1 + sovTypes(uint64(m.CertificateCountMax))
	}
	if m.MetadataSizeMax != 0 {
		n += 1 + sovTypes(uint64(m.MetadataSizeMax))
	}
	return n
}

func (m *Fees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeCoinDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.FeeCoinPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.FeeDefault.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterAccountClosed.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterAccountOpen.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.TransferAccountClosed.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.TransferAccountOpen.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.ReplaceAccountResources.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.AddAccountCertificate.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DelAccountCertificate.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.SetAccountMetadata.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterDomain1.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterDomain2.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterDomain3.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterDomain4.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RegisterDomain5.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.RegisterDomainDefault.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.RegisterOpenDomainMultiplier.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.TransferDomainClosed.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.TransferDomainOpen.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.RenewDomainOpen.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.CreateEscrow.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.UpdateEscrow.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.TransferToEscrow.Size()
	n += 2 + l + sovTypes(uint64(l))
	l = m.RefundEscrow.Size()
	n += 2 + l + sovTypes(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Fees.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configurer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidAccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidResource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidResource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainRenewalPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DomainRenewalPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainRenewalCountMax", wireType)
			}
			m.DomainRenewalCountMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainRenewalCountMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainGracePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DomainGracePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRenewalPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.AccountRenewalPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRenewalCountMax", wireType)
			}
			m.AccountRenewalCountMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountRenewalCountMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountGracePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.AccountGracePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesMax", wireType)
			}
			m.ResourcesMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourcesMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateSizeMax", wireType)
			}
			m.CertificateSizeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateSizeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateCountMax", wireType)
			}
			m.CertificateCountMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateCountMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSizeMax", wireType)
			}
			m.MetadataSizeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSizeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCoinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCoinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeDefault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAccountClosed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterAccountClosed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAccountOpen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterAccountOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAccountClosed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferAccountClosed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAccountOpen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferAccountOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceAccountResources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplaceAccountResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAccountCertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddAccountCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAccountCertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelAccountCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetAccountMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SetAccountMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomain1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomain1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomain2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomain2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomain3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomain3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomain4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomain4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomain5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomain5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDomainDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterDomainDefault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterOpenDomainMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterOpenDomainMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDomainClosed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferDomainClosed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDomainOpen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferDomainOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewDomainOpen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RenewDomainOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateEscrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateEscrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferToEscrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferToEscrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundEscrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundEscrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
